{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#mycoria","title":"Mycoria","text":"<p>Mycoria is an open and secure overlay network that connects all participants. It values freedom of connectivity and aims to imitate the curious and adventurous spirit of the early Internet:</p> <ul> <li>Everyone is equal: Easily connect to anyone</li> <li>Everyone is welcome: Open network without bureaucracy</li> <li>No spooking: Everthing is authenticated</li> <li>No surveillance: Everything is encrypted (+ Private Addresses!)</li> <li>No barriers: Connect via the Internet or extend Mycoria with your own mesh</li> </ul>"},{"location":"#design-goals","title":"Design Goals","text":"<ul> <li>Keep it small and simple</li> <li>Compatible with existing infrastructure (eg. DNS)</li> <li>Secure by default</li> <li>Private by default (WIP)</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Automatic end-to-end encryption</li> <li>Modern cryptography</li> <li>Smart and scalable routing</li> <li>Dashboard</li> <li>Resolve .myco DNS (OS configuration required)</li> <li>Simple Service Discovery</li> <li>Auto-Optimization/Healing of Network (for Internet overlay) (WIP)</li> <li>Rotating private addresses (WIP)</li> </ul> <p>Continue reading about the concept.</p>"},{"location":"#dashboard-impressions","title":"Dashboard Impressions","text":""},{"location":"about/","title":"About","text":""},{"location":"about/#name","title":"Name","text":"<p>Mycoria is derived from Mycorrhiza, which describes the symbiotic association between a fungus and a plant.</p> <p>In a similar way, Mycoria forms a symbiotic relationship with the current Internet and possibly other networks in the future. This integration maintains compatibility while simultaneously enhancing these networks through superior connectivity, heightened security, and enhanced privacy.</p>"},{"location":"about/#team","title":"Team","text":"<p>Daniel H\u00e5\u00e5vi designed Mycoria and laid the groundwork. He was inspired by the cjdns network as well as his previous work building the Safing Privacy Network.</p> <p>Johannes Schabauer is working on bringing Mycoria into the world of IoT and embedded devices. He has lots of experience building and running highly critical embedded sensor networks used for environmental monitoring and worker safety.</p> <p>We'd love to get more people on board! Ping Daniel at @dhaavi@infosec.exchange.</p>"},{"location":"concept/","title":"Concept","text":""},{"location":"concept/#simplicity","title":"Simplicity","text":"<p>Every Mycoria Router has an ID. For example:</p> <pre><code>fd1f:2cf7:903:b50b:e4cb:5c4c:270e:360c\n</code></pre> <p>This does not merely look like an IPv6 address, it is one. But it's also more than that: These addresses are generated by first creating a public/private key pair and then hashing the public key. This means, this IPv6 address is also the fingerprint of the public key of the router:</p> <pre><code>           Ed25519 public key\n                   \u2502\n                   \u25bc\n                BLAKE3\n                   \u2502\n                   \u25bc\nfd1f:2c7f:3903:b50b:e4cb:5c4c:270e:260c\n</code></pre> <p>This way you can distribute both the Mycoria address of a router and its public key with a single data point: An IPv6 address. As pretty much any software nowadays is able to resolve domains and connect via IPv6, Mycoria is compatible with all existing IPv6-enabled Internet infrastructure, as long as you have Mycoria running.</p> <p>This enables for Mycoria to do 100% end-to-end encryption of traffic within the network.</p>"},{"location":"concept/#scalable-routing","title":"Scalable Routing","text":"<p>Of course, random IPv6 addresses do not feel like a natural fit for scalable routing within a network. So, we take a two layered approach here:</p> <p>First, there is some structure to the router IPs. While there are special purpose prefixes, most IPs will be in a geo-marked prefix. Every country (+ States in the US) has their own prefix within Mycoria. This means that on the global level, Mycoria routers in the same country share the same prefix. These prefixes are also (tendentially) similar to nearby countries.</p> <p>Second, within a country prefix, Mycoria uses address-distance routing. This means that packets are sent in the direction of the \"address-nearest\" other router known. While this is not the most efficient way to route packets, it does work quite well with some additional steps - especially if confined to a smaller geographic region, as Mycoria is doing.</p> <p>In addition, further route exploration procedures may reveal better paths. These can then be use directly by employing source routing:</p>"},{"location":"concept/#layers","title":"Layers","text":"<p>After a router receives a packet, it is first handed to the switch. The switch handles source-routed packets (\"frames\"). These packets have the whole path within the packet header, so routers do not have to look up their table and do not necessary need to know the way to the destination. The switch labels in the switch block of the packet tells the switch which interface it should forward the packet to. This decreases the load on the router and also lays the groundwork for non-routable private addresses - more on that later.</p> <p>Only if a switch cannot handle a packet itself, eg. for the simple reason that switch labels have come to an end, it hands the packet to the routing layer. There, all the usual things happen, that you expect from a router.</p>"},{"location":"concept/#private-address","title":"Private Address","text":"<p>This is not implemented yet.</p> <p>In Mycoria, all packets are encrypted and authenticated. But Router IDs are still permanent and could be used to track the activities of a user. To enable privacy within Mycoria, there is a reserved prefix for private addresses, which cannot be routed. If using private addresses, packets are required to use the switch labels, explained before.</p> <p>In order to get these, a router can send out a routed discovery packet (with a private source address), and routers will forward the packet to the destination, but will also attach their switch labels to it. The destination router can then build the full switch path using that data and return the packet to the sender without knowing exactly where the sender is. A block of switch labels can just be reversed at any time to form the return switch labels.</p> <p>Switch labels can reveal some information if enough of the network is known. We are thinking about ways to mask the switch labels to mitigate this.</p>"},{"location":"concept/#cryptography","title":"Cryptography","text":"<p>Mycoria uses modern and state of the art cryprography:</p> <ul> <li>Curve25519 for public/private keys and key exchanges</li> <li>Chacha20Poly1305 for authenticated encryption</li> <li>BLAKE3 for hashing</li> </ul> <p>There are enough version and type fields to (mostly seamlessly) transition to other ciphers, should this become necessary.</p>"},{"location":"concept/#inspirations","title":"Inspirations","text":"<p>The concepts behind Mycoria are inspired by previous work on the Safing Privacy Network as well as from the cjdns network.</p>"},{"location":"configure/","title":"Configure","text":"<p>If you do not have a config file yet, get the default config, including an ID, with:</p> <pre><code>mycoria config generate # Auto-detect country using reallyfreegeoip.org.\n# or\nmycoria config generate XX # Replace XX with your country code. (US needs state: eg. US-DC)\n</code></pre> <p>Why does Mycoria need my country code?</p> <p>It's a vital part of the scalable routing concept. Read more about it here.</p> <p>If you pick an incorrect one, it will undermine your routing performance.</p> <p>Currently, there is just one simple yaml file that holds all configuration. Here is an example with explanations:</p> <pre><code>router:\n  # Identity of the router.\n  # Important: This contains the _private_ key of the router.\n  # Keep secret. Do not share.\n  # This is generated by \"mycoria config generate XX\" and must not be changed.\n  address:\n    ip: fd1f:2cf7:903:b50b:e4cb:5c4c:270e:360c\n    hash: BLAKE3\n    type: Ed25519\n    public: 8919290ac6c7e815...\n    private: 505f0dc9473cd22e...\n\n  # Define the \"universe\" the router is in.\n  # Routers can only connect to other routers within the same universe.\n  # You can use this to easily create own siloed Mycoria network.\n  universe: test\n\n  # Set a secret that every router in your universe must know to connect.\n  # In case you want to stay alone.\n  # While the universe name is shared in plain-text,\n  # the universe secret itself never leaves the router.\n  universeSecret: correct horse battery stable\n\n  # By default, Mycoria allows local traffic to any IP.\n  # If you distrust content hosted within Mycoria, you can enable isolation.\n  # If isolated, the router will only allow local traffic that goes friends.\n  # The router will still help others in the network to route their traffic.\n  isolate: true\n\n  # Advertise how this router is reachable through IANA assigned IPs and names.\n  iana:\n  - \"0.1.2.3\"\n  - \"4.5.6.7\"\n  - example.com\n\n  # Define to which routers this router should\n  # always try to hold a connection to.\n  connect:\n  - \"tcp://8.9.10.11\"\n  - \"tcp://example.org\"\n\n  # Define on which ports (and protocols) the router listens.\n  # Currently only tcp is supported, more will come. (WIP)\n  listen:\n  - tcp:47369\n\n  # Enable the router to choose automatically to which other\n  # routers it connects. Routers will optimize their connections\n  # based on measurements and estimated location.\n  autoConnect: true\n\n    # Specify the minimum amount of connections that the router\n    # should automatically connect to in order to improve network flow.\n    # Enables autoConnect if defined.\n    # Minimum is 1, Defaults to 2.\n    minAutoConnect: 5\n\n  # If no other routers with public IANA IPs are known,\n  # connect to one of these to bootstrap.\n  bootstrap:\n  - tcp://bootstrap.mycoria.org:47369\n\n  # Runs the router in stub mode. It will not relay router announcements\n  # and will appear as a dead end to other routers.\n  stub: true\n\n  # Runs the router in lite mode. It will attempt to reduce any non-essential\n  # activity and traffic.\n  # Behavior will slightly change over time and also depends on other routers\n  # playing along - do not use for workarounds.\n  # Other routers will not send route announcements to lite routers, except if\n  # they are lite routers themselves. This way, a group of lite routers can\n  # live without the full routing table, but can't use source routing.\n  lite: true\n\nsystem:\n  # Define the name of the tun interface.\n  tunName: Mycoria\n\n  # Set a custom MTU for the tun interface.\n  # Values not accepted by your OS will prevent Mycoria from starting.\n  tunMTU: 9000\n\n  # Disables the TUN device, cutting of Mycoria from the network of the device.\n  # Useful for relay only routers.\n  disableTUN: true\n\n  # Set a custom IP and port for the API to listen on.\n  # By default it listens on the internal Mycoria IP fd00::b909.\n  apiListen: \"127.0.0.1:80\"\n\n  # Define where and how to store the router state.\n  # Must end with one of:\n  # .json\n  # .sqlite - coming soon (WIP)\n  statePath: /home/user/.mycoria/state.json\n\n  # Chromium has a mechanism that disables IPv6 DNS queries if no IPv6\n  # connectivity is detected. This prevents any Chromium-based browser from\n  # sending IPv6 DNS queries to Mycoria for DNS resolution.\n  # Mycoria uses the same check for IPv6 connectivity, and will add a fake\n  # route to 2001:4860:4860::8888/128 in order to get Chromium to send IPv6 DNS\n  # queries.\n  # You can disable that behavior with this flag. \n  disableChromiumWorkaround: true\n\n# By default, no incoming traffic from Mycoria\n# to your device is allowed by the router.\n# You will need to define the services you want to allow here.\nservices:\n\n# This is a public service, any other Mycoria router can access it.\n# This service allows pinging and is added by default.\n- name: ping\n  url: 'icmp6:'\n  public: true\n\n# You can also announce services for simple service discovery.\n- name: Project Status\n  description: Website that shows the status of my project.\n  url: 'http://my-project.myco/'\n  public: true\n  advertise: true\n\n# You can also allow services only for friends or a custom list of routers.\n- name: Secret Portal\n  url: 'tcp://:81'\n  # Allow all friends.\n  friends: true\n  # Allow a list of router IPs or friend names.\n  for:\n  - fd1f:14ed:bc18:ecb1:af00:9a2d:2a76:201d\n  - alice\n\n# Choose your friends wisely.\n# Friends are used for simplified access control.\n# You can only allow connections to friends with \"isolate=true\"\n# You can only allow connections from friends to a service with \"friends=true\"\n# If you have setup your DNS for Mycoria, you can also resolve their names.\nfriends:\n- name: alice # Resolves as alice.myco.\n  ip: fd1f:2cd5:6feb:7aa7:d674:1b3c:c82c:dfc\n- name: bob # Resolves as bob.myco.\n  ip: fd11:6e6d:b98a:538d:67e5:5244:8e98:9f6e\n\n# You can also add any custom names for resolving.\n# Be sure to point your DNS server at Mycoria for these records.\nresolve:\n  status.myco: fd00::b909\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>Easy starters for common use cases. Don't forget to lookup the configuration options for more details.</p>"},{"location":"examples/#connect-to-your-server-at-home-behind-natfw","title":"Connect to Your Server at Home (Behind NAT/FW)","text":"<p>Access your server at home from anywhere, regardless of NAT or firewall:</p> <pre><code>services:\n- name: my-service # This is your service\n  url: 'http://my-service.myco/' # For service listening on 0.0.0.0:80 \n  friends: true\n\nfriends:\n- name: alice # This is your laptop\n  ip: fd1f:2cd5:6feb:7aa7:d674:1b3c:c82c:dfc\n</code></pre> <p>See the configuration reference for more details.</p>"},{"location":"examples/#run-mycoria-on-a-low-end-device","title":"Run Mycoria on a Low End Device","text":"<p>You can tweak Mycoria to make it run smooth on low end devices:</p> <pre><code>router:\n  # Do not relay route announcements to suppres relay traffic.\n  stub: true\n\n  # Ask routers not to send route announcements to this router.\n  # Reduces load on device.\n  # At time of writing, cannot use source routing due to missing information.\n  # Only recommended for servers, not clients.\n  lite: true\n</code></pre> <p>See the configuration reference for more details.</p>"},{"location":"examples/#pure-relay-without-network-access","title":"Pure Relay \u2013 Without Network Access","text":"<p>If you want to support the Mycoria network, but want to make sure that the Mycoria network cannot access your server in any way, you can simply disable the tun interface:</p> <pre><code>router:\n  # Disables the TUN device, cutting of Mycoria from the network of the device.\n  disableTUN: true\n</code></pre> <p>See the configuration reference for more details.</p>"},{"location":"examples/#run-a-public-service-on-mycoria","title":"Run a Public Service on Mycoria","text":"<p>If you want to run a public service available to all other Mycoria users, you can also advertise it so others can find it through the router dashboard:</p> <pre><code>services:\n- name: My Awesome Service\n  description: Awesome service does awesome things.\n  url: 'http://awesome-service.myco/'\n  public: true\n  advertise: true\n</code></pre> <p>See the configuration reference for more details.</p>"},{"location":"examples/#use-mycoria-privately","title":"Use Mycoria Privately","text":"<p>If you're not interested in connecting to other parties within Mycoria, you can keep your device to themselves by adding them as <code>friends:</code> and setting <code>isolate: true</code>, as well as adding <code>friends: true</code> to all your defined services:</p> <pre><code>router:\n  isolate: true\n\nservices:\n- name: ping\n  url: 'icmp6:'\n  friends: true\n\nfriends:\n- name: alice\n  ip: fd1f:2cd5:6feb:7aa7:d674:1b3c:c82c:dfc\n</code></pre> <p>This way, you can still use the global Mycoria network for routing, connectivity and relaying your own traffic, but you do not send any traffic to any other Mycoria routers, and do not allow any other routers to access your defined services.</p> <p>See the configuration reference for more details.</p>"},{"location":"examples/#run-a-separate-mycoria-network","title":"Run a Separate Mycoria Network","text":"<p>If you do not want to connect to any other Mycoria router whatsoever, you can do so by creating your own universe:</p> <pre><code>router:\n  universe: my private network\n  universeSecret: correct horse battery stable\n</code></pre> <p>See the configuration reference for more details.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#do-i-need-to-configure-iana-ips","title":"Do I Need To Configure IANA IPs?","text":"<p>No, IANA IPs are optional!</p> <p>IANA IPs are just useful so that other Mycoria routers can connect to your router via the Internet. This also enables other routers to automatically optimize the network by connecting directly to your router if there is a lot of demand.</p>"},{"location":"install/","title":"Install","text":""},{"location":"install/#packages","title":"Packages","text":"<p>We haven't packaged Mycoria yet for any platform. If you want to help out, it is much appreciated. Specifically, we are looking for help with packaging for Windows WinGet, .deb, .rpm and inclusion in Linux distros.</p>"},{"location":"install/#manual-install","title":"Manual Install","text":"<p>More platforms are planned, help is welcome!</p>"},{"location":"install/#windows-amd64-arm64","title":"Windows (amd64, arm64)","text":"<p>Install with powershell as Admin:</p> <pre><code># Go to destination where you want to install Mycoria\n\n# Download latest release\nInvoke-WebRequest -Uri \"https://github.com/mycoria/mycoria/releases/latest/download/mycoria_windows_amd64.exe\" -OutFile \"mycoria.exe\"\n# Or, download arm64 version:\n# Invoke-WebRequest -Uri \"https://github.com/mycoria/mycoria/releases/latest/download/mycoria_windows_arm64.exe\" -OutFile \"mycoria.exe\"\n\n# Generate config file.\n.\\mycoria.exe config generate | Tee-Object -FilePath \"config.yaml\"\n\n# Install and enable systemd service\n# WIP...\n</code></pre> <p>Required Dependency for Windows</p> <p>Mycoria requires WinTun. Download it here and place <code>wintun.dll</code> in the same directory as mycoria.exe</p>"},{"location":"install/#linux-amd64-arm64-armv7","title":"Linux (amd64, arm64, armv7)","text":"<pre><code># Create directory and download binary.\nmkdir /opt/mycoria\nwget https://github.com/mycoria/mycoria/releases/latest/download/mycoria_linux_amd64 -O /opt/mycoria/mycoria\n# Or, download for a different architecture:\n# arm64: wget https://github.com/mycoria/mycoria/releases/latest/download/mycoria_linux_arm64 -O /opt/mycoria/mycoria\n# armv7: wget https://github.com/mycoria/mycoria/releases/latest/download/mycoria_linux_armv7 -O /opt/mycoria/mycoria\nchmod +x /opt/mycoria/mycoria\n\n# Generate config file.\n/opt/mycoria/mycoria config generate | tee /opt/mycoria/config.yaml\n\n# Install and enable systemd service\ncurl https://raw.githubusercontent.com/mycoria/mycoria/master/packaging/mycoria.service | sudo tee /etc/systemd/system/mycoria.service\nsystemctl enable mycoria # Start at boot.\nsystemctl start mycoria # Start now.\njournalctl -fu mycoria # Live-view logs.\n\n# Check status\n# Open Dashboard in Browser: http://[fd00::b909]\n\n# Or, check status with curl:\n# View router ID and version\ncurl [fd00::b909]\n# View routing table\ncurl [fd00::b909]/table\n</code></pre> <p>Why does Mycoria need my country code?</p> <p>It's a vital part of the scalable routing concept. Read more about it here.</p> <p>If you pick an incorrect one, it will undermine your routing performance.</p>"},{"location":"install/#dns-on-linux","title":"DNS on Linux","text":"<p>In order to use <code>.myco</code> domains, you need to tell Linux to resolve <code>.myco</code> using Mycoria.</p> <p>As there are so many different systems and configuration options, help here is much appreciated. (This is such a mess on Linux - we probably won't try to auto-configure this until it gets better.)</p>"},{"location":"install/#option-1-systemd-networkd","title":"Option 1: systemd-networkd","text":"<p>Create this file</p> <pre><code>/etc/systemd/network/mycoria.network\n</code></pre> <p>with the following contents:</p> <pre><code>[Match]\nName=mycoria\n\n[Network]\nDNS=fd00::b909\nDomains=~myco\n</code></pre> <p>To make sure the changes are picked up do:</p> <pre><code>sudo networkctl reload\n</code></pre>"},{"location":"install/#option-2-systemd-resolved","title":"Option 2: systemd-resolved","text":"<p>Create this file</p> <pre><code>/etc/systemd/resolved.conf.d/mycoria.conf\n</code></pre> <p>with the following contents:</p> <pre><code>[Resolve]\nDNS=fd00::b909\nDomains=~myco\n</code></pre> <p>To make sure the changes are picked up do:</p> <pre><code>sudo systemctl restart systemd-resolved\n</code></pre> <p>Note: If you have another global resolver configured, make sure it has <code>Domains=~.</code> set for better compatibility. Otherwise all queries might be first routed to mycoria and then your other resolver. It still works, but you loose a couple milliseconds.</p>"},{"location":"install/#option-3-networkmanager","title":"Option 3: NetworkManager","text":"<pre><code>nmcli connection modify mycoria ipv6.dns \"fd00::b909\"\nnmcli connection modify mycoria ipv6.dns-search \"myco\"\nnmcli connection modify mycoria ipv6.dns-options \"inet6 timeout:1 attempts:1\"\nnmcli connection modify mycoria ipv6.dns-priority \"1000\"\n\n# Check interface settings with:\nnmcli connection show mycoria\n# Check full status with\nnmcli\n</code></pre> <p>If this does not work or you have multiple mycoria interfaces in nmcli, try resetting the NetworkManager interface settings for mycoria:</p> <pre><code>nmcli connection delete mycoria\nsudo rm /etc/NetworkManager/system-connections/mycoria.nmconnection\n</code></pre>"},{"location":"install/#option-4-ipv6-router-advertisements-ndslaac","title":"Option 4: IPv6 Router Advertisements (ND/SLAAC)","text":"<p>Mycoria sends router advertisements that advertise the DNS server (RDNSS) and the <code>.myco</code> domain (DNSSL). If you can make your Linux accept these, everything might auto-configure.</p> <p>Starting point:  </p> <pre><code>sudo sysctl -w net.ipv6.conf.mycoria.accept_ra=1\n</code></pre> <p>The rest is up to you.</p>"},{"location":"install/#option-5-portmaster","title":"Option 5: Portmaster","text":"<p>If you are using Portmaster, you can simply add this to the configured DNS Servers:</p> <pre><code>dns://[fd00::b909]?name=Mycoria&amp;search=myco&amp;search-only\n</code></pre>"},{"location":"quick-start/","title":"Quick Start","text":"<p>If you just want to plunge into it and try it, here is the fastest way:</p>"},{"location":"quick-start/#download-binary","title":"Download Binary","text":"<p>Windows amd64 arm64 Linux amd64 arm64 armv7</p> <p>Or, build from source instead.</p> <p>More platforms are planned, help is welcome!</p> <p>Required Dependency for Windows</p> <p>Mycoria requires WinTun. Download it here and place <code>wintun.dll</code> in the same directory as mycoria.exe</p>"},{"location":"quick-start/#generate-config","title":"Generate Config","text":"<pre><code>mycoria config generate\n</code></pre>"},{"location":"quick-start/#run-it","title":"Run it!","text":"<pre><code>mycoria run --config /path/to/config.yaml\n</code></pre> <p>Required Setup for .myco Domains on Linux</p> <p>Linux requires some extra setup for .myco domains to work. Read how to do this in this install page section.</p>"}]}